{"version":3,"sources":["logo.svg","components/Greet.js","components/Welcome.js","components/Hello.js","components/Messages.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Greet","props","name","heroname","children","Welcome","this","Component","Hello","React","createElement","id","className","Messages","state","messages","setState","onClick","changeMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,0FC8B5BC,G,kBATD,SAAAC,GACV,OACI,6BACI,oCAAUA,EAAMC,KAAhB,UAA6BD,EAAME,UAClCF,EAAMG,Y,mCCdJC,E,iLALb,OAAO,wCAAcC,KAAKL,MAAMC,KAAzB,UAAsCI,KAAKL,MAAME,SAAjD,S,GAHaI,aCmBPC,EAlBD,WAUZ,OAAQC,IAAMC,cAAc,MAC5B,CAACC,GAAI,QAAQC,UAAU,SACvBH,IAAMC,cAAc,KAAK,KAAK,eCajBG,E,YAzBZ,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,SAAW,qBAHN,E,6EAOTT,KAAKU,SAAS,CACVD,SAAW,2B,+BAGZ,IAAD,OAEP,OACI,6BACI,4BACCT,KAAKQ,MAAMC,UAEX,4BAAQE,QAAW,kBAAI,EAAKC,kBAA5B,kB,GAnBYX,aCkCRY,MA7Bf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAOV,KAAM,YAAYC,SAAU,UAAS,gDAC5C,kBAAC,EAAD,CAAOD,KAAM,QAAQC,SAAU,YAAW,2CAC1C,kBAAC,EAAD,CAAOD,KAAO,SAASC,SAAU,cACjC,kBAAC,EAAD,CAASD,KAAM,KAAKC,SAAU,WAC9B,kBAAC,EAAD,CAASD,KAAO,OAAOC,SAAU,cACjC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b4fa373.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\n//Functional Components\r\n\r\n//Props Implement\r\n\r\n// function Greet(){\r\n//  return <h1> HI! Ritam </h1>\r\n// }\r\n//const Greet = () => <h1> Hi! Ritam </h1>\r\n\r\n// const Greet = (props) => {\r\n//     console.log(props);\r\n// return(\r\n//     <h1>Hi Ritam</h1>\r\n{/* <h1>Hi {props.name}</h1> */}\r\n// )\r\n// }\r\n\r\n\r\n\r\nconst Greet = props => {\r\n    return (\r\n        <div>\r\n            <h1> Hi! {props.name} a.k.a {props.heroname}</h1>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Greet","import React ,{Component} from 'react';\r\n//Class Component\r\n//Props Implement\r\nclass Welcome extends Component{\r\n render(){\r\n  //  return <h1> Class Component </h1>\r\n  return <h1> Welcome {this.props.name} a.k.a {this.props.heroname} </h1>\r\n\r\n }\r\n}\r\n\r\nexport default Welcome\r\n","import React  from 'react';\r\n//Jsx\r\n//without jsx\r\n\r\nconst Hello = () => {\r\n\r\n  // return (\r\n  //   <div className=\"react\"><h1>Hi! React</h1></div>  //jsx\r\n  // )\r\n   //without jsx\r\n  // return  React.createElement('div',null,React.createElement('h1',null,'Hi! React')\r\n  \r\n  // null->Additional Property\r\n\r\n  return  React.createElement('div',\r\n  {id: 'react',className:'react'},      //Additional Property               \r\n  React.createElement('h1',null,'Hi! React')\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default Hello;\r\n","import React ,{Component} from 'react';\r\n//Class Component\r\n//State implement\r\nclass Messages extends Component{\r\n   constructor(){\r\n       super()\r\n       this.state = {\r\n           messages : 'Hello React State'\r\n       }\r\n   } \r\n   changeMessage(){\r\n       this.setState({\r\n           messages : 'Thanks for subscribe'\r\n       })\r\n   }\r\n render(){\r\n//    return <h1> State Change </h1>\r\n  return (\r\n      <div>\r\n          <h1> \r\n          {this.state.messages}\r\n           </h1>\r\n           <button onClick = {()=>this.changeMessage()}>Subscribe</button>\r\n          </div>\r\n  )\r\n\r\n }\r\n}\r\n\r\nexport default Messages\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Greet from './components/Greet';\nimport Welcome from './components/Welcome';\nimport Hello from './components/Hello';\nimport Messages from './components/Messages';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Greet name =\"Cristiano\" heroname =\"batman\"><p>This is children</p></Greet>\n      <Greet name =\"Messi\" heroname =\"superman\"><button>Submit</button></Greet>\n      <Greet name = \"Neymar\" heroname =\"Wonderman\"></Greet>\n      <Welcome name =\"dx\" heroname =\"batman\"></Welcome>\n      <Welcome name = \"dgen\" heroname =\"Wonderman\"></Welcome>\n      <Hello></Hello>\n      <Messages></Messages>\n\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//stateless functional component\n//stateful class component\n\nserviceWorker.unregister();\n"],"sourceRoot":""}